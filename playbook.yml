---
- name: Setup ec2-k8s host
  hosts: ec2-k8s
  become: yes
  vars_files:
    - vault.yml
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"

  tasks:
    - name: Update and upgrade dnf packages
      dnf:
        name: "*"
        state: latest
        update_cache: yes

    - name: Install required packages
      dnf: # Alterado de 'yum' para 'dnf'
        name:
          - curl-minimal
          - wget
          - openssl
          - git
          - unzip
          - docker
          - sed
        state: present

    - name: Install k3s
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable traefik --https-listen-port 6550" sh -

    - name: Install Helm
      shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: mkdir .kube
      shell: |
        rm -rf /home/{{ ansible_user }}/.kube 2>/dev/null
        mkdir /home/{{ ansible_user }}/.kube

    - name: Copy k3s config to user kube config
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes

    - name: Modify kube config for insecure skip tls verify
      replace:
        path: /home/{{ ansible_user }}/.kube/config
        regexp: 'certificate-authority-data:.*'
        replace: 'insecure-skip-tls-verify: true'

    - name: Get EC2 public IP
      shell: |
        export TOKEN=$(curl -sX PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
        export EC2_PUBLIC_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4)
        echo $EC2_PUBLIC_IP
      register: ec2_public_ip

    - name: Update kube config with EC2 public IP
      replace:
        path: /home/{{ ansible_user }}/.kube/config
        regexp: '127.0.0.1'
        replace: '{{ ec2_public_ip.stdout }}'

    - name: define KUBECONFIG
      shell: |
        echo "export KUBECONFIG=/home/{{ ansible_user }}/.kube/config" >> /home/{{ ansible_user }}/.bashrc

    - name: Add Helm repositories
      shell: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add kong https://charts.konghq.com
        helm repo update

    - name: Install postgresql
      shell: |
        helm upgrade --install postgres-postgresql bitnami/postgresql --version {{ POSTGRES_CHART_VERSION }} \
          --set volumePermissions.enabled=true \
          --set primary.persistence.size=8Gi \
          --set fullnameOverride=postgres-postgresql \
          --set global.postgresql.auth.postgresPassword={{ POSTGRES_ADMIN_PASSWORD }} \
          --set global.postgresql.auth.database=kong

    - name: Install Kong
      shell: |
        helm upgrade --install kong kong/kong --version {{ KONG_CHART_VERSION }} \
          --set admin.annotations.'konghq\.com/plugins'=kong-admin-basicauth \
          --set admin.enabled=true \
          --set admin.http.containerPort=8001 \
          --set admin.http.enabled=true \
          --set admin.http.servicePort=8001 \
          --set admin.ingress.annotations.'konghq\.com/plugins'=kong-admin-basicauth \
          --set admin.ingress.annotations.'konghq\.com/strip-path'=true \
          --set admin.ingress.annotations.'kubernetes\.io/tls-acme'=true \
          --set admin.ingress.enabled=true \
          --set admin.ingress.hostname=manager.{{ HOST_NAME }} \
          --set admin.ingress.ingressClassName=kong \
          --set admin.ingress.path=/ \
          --set admin.tls.enabled=false \
          --set admin.type=ClusterIP \
          --set clustertelemetry.enabled=true \
          --set enterprise.enabled=false \
          --set env.admin_gui_api_url=https://manager.{{ HOST_NAME }} \
          --set env.admin_gui_path=/manager \
          --set env.admin_gui_url=https://manager.{{ HOST_NAME }}/manager \
          --set env.database=postgres \
          --set env.log_level=notice \
          --set env.pg_database=kong \
          --set env.pg_host=postgres-postgresql.default \
          --set env.pg_password.valueFrom.secretKeyRef.key=postgres-password \
          --set env.pg_password.valueFrom.secretKeyRef.name=postgres-postgresql \
          --set env.pg_port=5432 \
          --set env.pg_user=postgres \
          --set env.portal=false \
          --set env.proxy_url=https://{{ HOST_NAME }} \
          --set env.tracing_instrumentations=all \
          --set env.tracing_sampling_rate=1 \
          --set ingressController.enabled=true \
          --set ingressController.env.kong_admin_tls_skip_verify=true \
          --set ingressController.ingressClass=kong \
          --set ingressController.rbac.create=true \
          --set manager.annotations.'konghq\.com/plugins'=kong-admin-basicauth \
          --set manager.enabled=true \
          --set manager.http.containerPort=8002 \
          --set manager.http.enabled=true \
          --set manager.http.servicePort=8002 \
          --set manager.ingress.annotations.'konghq\.com/plugins'=kong-admin-basicauth \
          --set manager.ingress.annotations.'kubernetes\.io/tls-acme'=true \
          --set manager.ingress.enabled=true \
          --set manager.ingress.hostname=manager.{{ HOST_NAME }} \
          --set manager.ingress.ingressClassName=kong \
          --set manager.ingress.path=/manager \
          --set manager.tls.enabled=false \
          --set manager.type=ClusterIP \
          --set portal.enabled=false \
          --set portalapi.enabled=false \
          --set postgresql.enabled=false \
          --set proxy.enabled=true \
          --set proxy.http.containerPort=8000 \
          --set proxy.http.enabled=true \
          --set proxy.http.servicePort=80 \
          --set proxy.tls.containerPort=8443 \
          --set proxy.tls.enabled=true \
          --set proxy.tls.servicePort=443 \
          --set proxy.type=LoadBalancer

    - name: Apply Kong ACME configuration
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: configuration.konghq.com/v1
        kind: KongClusterPlugin
        metadata:
          name: global-acme
          annotations:
            kubernetes.io/ingress.class: kong
          labels:
            global: "true"
        config:
          storage: kong
          allow_any_domain: true
          tos_accepted: true
          fail_backoff_minutes: 1
          account_email: 'sflausino@ciandt.com'
          api_uri: https://acme-staging-v02.api.letsencrypt.org/directory
          # api_uri: https://acme-v02.api.letsencrypt.org/directory
        plugin: acme
        EOF

    - name: Apply Kong Basic auth configuration - Create Secret
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: kong-admin-basicauth
          namespace: default
          labels:
            konghq.com/credential: basic-auth
        stringData:
          username: kong_admin
          password: {{ KONG_ADMIN_PASSWORD }}
        EOF

    - name: Apply Kong Basic auth configuration - Create KongPlugin
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: configuration.konghq.com/v1
        kind: KongPlugin
        metadata:
          name: kong-admin-basicauth
          namespace: default
          annotations:
            kubernetes.io/ingress.class: kong
        config:
          hide_credentials: true
        plugin: basic-auth
        EOF

    - name: Apply Kong Basic auth configuration - Create KongConsumer
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: configuration.konghq.com/v1
        kind: KongConsumer
        metadata:
          name: consumer-kong-admin
          namespace: default
          annotations:
            kubernetes.io/ingress.class: kong
        username: kong_admin
        credentials:
          - kong-admin-basicauth
        EOF
